basePath: /api/v1
definitions:
  model.Ping:
    properties:
      email:
        type: string
    type: object
  model.ResetPassword:
    properties:
      password:
        type: string
    type: object
  model.URL:
    properties:
      created_at:
        type: string
      hash:
        type: string
      id:
        type: string
      long_url:
        type: string
      user_id:
        type: string
    required:
    - long_url
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: string
      is_locked:
        type: boolean
      lastname:
        type: string
      password:
        minLength: 8
        type: string
      role:
        type: integer
      salt:
        type: string
      updated_at:
        type: string
    required:
    - email
    - firstname
    - password
    type: object
  model.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  utility.Response:
    properties:
      code:
        type: integer
      data: {}
      error:
        description: for errors that occur even if request is successful
      extra: {}
      message:
        type: string
      name:
        description: name of the error
        type: string
      status:
        type: string
    type: object
host: brief.up.railway.app
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: URL Shortener.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Brief
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: check api health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
      summary: check api health
      tags:
      - Health
    post:
      consumes:
      - application/json
      description: check api health
      parameters:
      - description: Ping
        in: body
        name: ping
        required: true
        schema:
          $ref: '#/definitions/model.Ping'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utility.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
      summary: check api health
      tags:
      - Health
  /url:
    get:
      consumes:
      - application/json
      description: get all my urls
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.URL'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: get all my urls
      tags:
      - URL
  /url/{id}:
    delete:
      consumes:
      - application/json
      description: delete my url
      parameters:
      - description: url ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.URL'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: delete my url
      tags:
      - URL
  /url/get-all:
    get:
      consumes:
      - application/json
      description: list all urls - Admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: list all urls - Admin
      tags:
      - URL - Admin
  /url/get-all/{user-id}:
    get:
      consumes:
      - application/json
      description: get urls by a user - Admin
      parameters:
      - description: user ID
        in: path
        name: user-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: get urls by a user - Admin
      tags:
      - URL - Admin
  /url/shorten:
    post:
      consumes:
      - application/json
      description: shorten a url
      parameters:
      - description: URL
        in: body
        name: url
        required: true
        schema:
          $ref: '#/definitions/model.URL'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.URL'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: shorten a url
      tags:
      - URL
  /users:
    get:
      consumes:
      - application/json
      description: get ne
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: get me
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: update a user
      parameters:
      - description: User Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: update a user
      tags:
      - User
    post:
      consumes:
      - application/json
      description: register a user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
      summary: register a user
      tags:
      - User
  /users/{idOrEmail}:
    get:
      consumes:
      - application/json
      description: get user - Admin
      parameters:
      - description: User ID or Email
        in: path
        name: idOrEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: get user - Admin
      tags:
      - User - Admin
  /users/get-all:
    get:
      consumes:
      - application/json
      description: list all users - Admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: list all users - Admin
      tags:
      - User - Admin
  /users/lock/{idOrEmail}:
    patch:
      consumes:
      - application/json
      description: lock user - Admin
      parameters:
      - description: User ID or Email
        in: path
        name: idOrEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: lock user - Admin
      tags:
      - User - Admin
  /users/login:
    post:
      consumes:
      - application/json
      description: log in
      parameters:
      - description: Login Info
        in: body
        name: userInfo
        required: true
        schema:
          $ref: '#/definitions/model.UserLogin'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
      summary: log in
      tags:
      - User
  /users/reset-password:
    patch:
      consumes:
      - application/json
      description: update a user's password
      parameters:
      - description: Password Update
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/model.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: update a user's password
      tags:
      - User
  /users/unlock/{idOrEmail}:
    patch:
      consumes:
      - application/json
      description: unlock user - Admin
      parameters:
      - description: User ID or Email
        in: path
        name: idOrEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utility.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utility.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utility.Response'
      security:
      - JWTToken: []
      summary: unlock user - Admin
      tags:
      - User - Admin
securityDefinitions:
  JWTToken:
    description: JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
